#!/usr/bin/env python
import requests
import json
import time
import os
import atexit
import subprocess
from tabulate import tabulate
from colorama import Fore, Back, Style
from datetime import datetime

# act like firefox
req_headers = {
        "Accept": "application/json, text/javascript, */*; q=0.01",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "en-US,en;q=0.5",
        "Cache-Control": "no-cache",
        "Connection": "keep-alive",
        "Referer": "http://192.168.1.250:9001/",
        "Sec-GPC": "1",
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:135.0) Gecko/20100101 Firefox/135.0",
        "X-Requested-With": "XMLHttpRequest",
}
req_url = "http://192.168.1.250:9001/isc/get_var_js.aspx"
req_params = {
    "StatusPumpe3": "",
    "StatusPumpe4": "",
    "StatusPumpe5": "",
    "StatusPumpe6": "",
    "StatusPumpe7": "",
    "Taktualno": "",
    "Tfs": "",
    "Tmax": "",
    "Tmin": "",
    "Tsobna": "",
    "Tsolar": "",
    "Tspv": "",
    "Tzad_komf": "",
    "Tzad_mraz": "",
    "Tzad_red": "",
    "Tzadata": "",
    "mod_rada": "",
    "mod_rezim": "",
    "__Time": "",
    "__Date": "",
    "Jeftina_tarifa": "",  # Add missing parameters
    "grejanje_off": "",   # Add missing parameters
    "Alarm_tank": "",     # Add missing parameters
    "Alarm_solar": "",    # Add missing parameters
    "STATE_Preklopka": "",# Add missing parameters
    "SESSIONID": "-1",
    "_": int(time.time() * 1000)  # Generate 13-digit millisecond timestamp
}

#
# COLORING
#
TEMP_MIN = 45
TEMP_MAX = 60
colors = [51, 45, 39, 38, 33, 32, 27, 26, 21, 190, 226, 220, 214, 208, 202, 124, 160, 196]

COLOR_ON  = 40
COLOR_OFF = 226

def contrast_color(color):
    if color < 16:
        return 15 if color == 0 else 0

    if color > 231:
        return 15 if color < 244 else 0

    g = ((color - 16) % 36) // 6
    return 0 if g > 2 else 15


def cbg(color):
    return f"\033[48;5;{color}m"


def ctext(color, text):
    contrast = contrast_color(color)
    text = text if text is not None else color
    return f"\033[48;5;{color}m\033[38;5;{contrast}m{text}\033[0m"


def temperature_to_color(temp):
    global TEMP_MIN
    global TEMP_MAX
    num_colors = len(colors)

    if temp >= TEMP_MAX:
        TEMP_MAX = temp
        return colors[-1]
    elif temp <= TEMP_MIN:
        TEMP_MIN = temp
        return colors[0]

    index = (temp - TEMP_MIN) * (num_colors - 1) // (TEMP_MAX - TEMP_MIN)
    return colors[int(index)]


def temp_to_ctext(temp):
    color = temperature_to_color(temp)
    pad_float = str(f"{temp:.2f}")
    pad_def   = f"{pad_float} " + chr(176) + "C"
    return ctext(color, f"{pad_def:>9}")

def bool_to_ctext(b):
    if b:
        return ctext(COLOR_ON, f" {b} ")
    else:
        return ctext(COLOR_OFF, f" {b} ")



def term_clear():
    os.system("clear")


def term_cursor_reset():
    print("\033[0;0H", end="")


def term_cursor_hide():
    print("\033[?25l")


def term_cursor_show():
    print("\033[?25h")


def term_blank():
    term_cursor_hide()
    term_clear()

#
# OTHER INFO
#
def timestamp():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")


def get_local_ips():
    """Get all IPv4 addresses excluding 127.0.0.1."""
    try:
        result = subprocess.run(
            "ip -o -4 addr show | awk '{print $4}' | cut -d/ -f1 | grep -v '127.0.0.1'",
            shell=True,
            capture_output=True,
            text=True
        )
        return result.stdout.strip().replace("\n", " ") if result.stdout else "No IP found"
    except Exception as e:
        return f"Error: {e}"


# exit handler
@atexit.register
def signal_handler():
    term_cursor_show()

session = requests.Session()

# Create a prepared request
def get_prepared():
    global session
    req_params["_"] = int(time.time() * 1000)
    request = requests.Request("GET", req_url, headers=req_headers, params=req_params)
    prepared = session.prepare_request(request)
    return prepared

def print_prepared(prepared):
    print(f"{prepared.method} {prepared.url} HTTP/1.1")
    for key, value in prepared.headers.items():
        print(f"{key}: {value}")

    if prepared.body:
        print("\nRaw Body Bytes:", prepared.body.encode() if isinstance(prepared.body, str) else prepared.body)

last_failed = False
last_data = None
def fetch_info():

    global session
    global output
    global last_failed
    global last_data

    # Send GET request
    try:
        prepared = get_prepared()
        print_prepared(prepared)
        response = session.send(prepared)
        response = requests.get(req_url, headers=req_headers, params=req_params)
        response.raise_for_status()  # Raise an error for HTTP error codes
        data = response.json()
        last_data = data
    except Exception as e:
        last_failed = True
        data = last_data
        if last_data is None:
            print(f"[{timestamp()}] {e.__class__.__name__}")
            return

    # Collect key-value pairs
    dic = {}
    for key, value in data.items():
        if isinstance(value, dict) and "value" in value:
            dic[key] = value["value"]

    # get temps and pump status
    Tspv = temp_to_ctext(dic["Tspv"])
    Tsolar = temp_to_ctext(dic["Tsolar"])
    Taktualno = temp_to_ctext(dic["Taktualno"])
    Tzadata = temp_to_ctext(dic["Tzadata"])
    Tzad_red = temp_to_ctext(dic["Tzad_red"])
    Tzad_komf = temp_to_ctext(dic["Tzad_komf"])
    Tfs = temp_to_ctext(dic["Tfs"])
    Tmax = temp_to_ctext(dic["Tmax"])
    Tmid = temp_to_ctext((dic["Tmax"] + dic["Tmin"]) / 2)
    Tmin = temp_to_ctext(dic["Tmin"])
    Tsobna = temp_to_ctext(dic["Tsobna"])
    Thottest = temp_to_ctext(TEMP_MAX)
    Tcoldest = temp_to_ctext(TEMP_MIN)
    temps = []
    temps.append(["Outside 󱇜", Tspv])
    temps.append(["Solar 󱩳", Tsolar])
    temps.append(["Room ", Tsobna])
    temps.append(["Active ", Taktualno])
    temps.append(["Current ", Tzadata])
    temps.append(["Reduced ", Tzad_red])
    temps.append(["Comfort ", Tzad_komf])
    temps.append(["Max ", Tmax])
    temps.append(["Mid 󰝹", Tmid])
    temps.append(["Min ", Tmin])
    temps.append(["Circ. ", Tfs])
    temps.append(["Hottest 󰈸", Thottest])
    temps.append(["Coldest ", Tcoldest])

    StatusPumpe3 = bool_to_ctext(int(dic["StatusPumpe3"]))
    StatusPumpe4 = bool_to_ctext(int(dic["StatusPumpe4"]))
    StatusPumpe5 = bool_to_ctext(int(dic["StatusPumpe5"]))
    StatusPumpe6 = bool_to_ctext(int(dic["StatusPumpe6"]))
    StatusPumpe7 = bool_to_ctext(int(dic["StatusPumpe7"]))
    ModRada      = bool_to_ctext(int(dic["mod_rada"]))
    ModRezim     = bool_to_ctext(int(dic["mod_rezim"]))
    status = []
    status.append(["Mode 󱪯", ModRada])
    status.append(["Regime 󱖫", ModRezim])
    status.append(["Heat 󱩃", StatusPumpe6])
    status.append(["Gas 󰙇", StatusPumpe4])
    status.append(["Circ. ", StatusPumpe3])
    status.append(["Pump5 ", StatusPumpe5])
    status.append(["Pump7 ", StatusPumpe7])

    # format tables
    fmt = "plain"
    table1_str = tabulate(temps, tablefmt=fmt, colalign=("right",))
    table2_str = tabulate(status, tablefmt=fmt, colalign=("right",))
    table1_lines = table1_str.splitlines()
    table2_lines = table2_str.splitlines()
    max_lines = max(len(table1_lines), len(table2_lines))
    while len(table1_lines) < max_lines:
        table1_lines.append("")
    while len(table2_lines) < max_lines:
        table2_lines.append("")


    COLOR_HEAD = COLOR_ON
    if last_failed:
        COLOR_HEAD = COLOR_OFF

    print(ctext(COLOR_HEAD, f"{timestamp()} / {get_local_ips()}"))

    for line1, line2 in zip(table1_lines, table2_lines):
        print(f"{line1}  {line2}")

    last_failed = False

term_cursor_hide()
term_clear()


running = True

try:
    while running:
        #term_cursor_reset()
        fetch_info()
        time.sleep(1)
except KeyboardInterrupt:
    print("Quitting...")
    running = False
