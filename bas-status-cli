#!/usr/bin/env python
import requests
import json
import time
import os
import atexit
import subprocess
from tabulate import tabulate
from colorama import Fore, Back, Style
from datetime import datetime

# url = "http://192.168.1.250:9001/isc/get_var_js.aspx?AUTOT=&Alarm_solar=&Alarm_tank=&EK=&GK=&Jeftina_tarifa=&MANUALPreklopka=&STATE_Preklopka=&Status3PTReg3=&StatusPumpe3=&StatusPumpe4=&StatusPumpe5=&StatusPumpe6=&StatusPumpe7=&TP=&Taktualno=&Tfs=&Tmax=&Tmin=&Tsobna=&Tsolar=&Tspv=&Tzad_komf=&Tzad_mraz=&Tzad_red=&Tzadata=&__Date=&__Time=&deltaT=&glavni_on=&grejanje_off=&kom=&kom1=&kom2=&mod_rada=&mod_rezim=&mraz=&mraz1=&mraz2=&red=&red1=&red2=&sw1=&sw2=&sw3=&sw4=&rucni_komf=&rucni_red=&SESSIONID=-1"
url = "http://192.168.1.250:9001/isc/get_var_js.aspx?StatusPumpe3=&StatusPumpe4=&StatusPumpe5=&StatusPumpe6=&StatusPumpe7=&Taktualno=&Tfs=&Tmax=&Tmin=&Tsobna=&Tsolar=&Tspv=&Tzad_komf=&Tzad_mraz=&Tzad_red=&Tzadata=&mod_rada=&mod_rezim=&SESSIONID=-1"


#
# COLORING
#
TEMP_MIN = 45
TEMP_MAX = 60
colors = [51, 45, 39, 38, 33, 32, 27, 26, 21, 190, 226, 220, 214, 208, 202, 124, 160, 196]

def contrast_color(color):
    if color < 16:
        return 15 if color == 0 else 0

    if color > 231:
        return 15 if color < 244 else 0

    g = ((color - 16) % 36) // 6
    return 0 if g > 2 else 15


def ctext(color, text):
    contrast = contrast_color(color)
    text = text if text is not None else color
    return f"\033[48;5;{color}m\033[38;5;{contrast}m{text}\033[0m"


def temperature_to_color(temp):

    """Map a temperature value to a color."""
    global TEMP_MIN
    global TEMP_MAX
    num_colors = len(colors)

    if temp >= TEMP_MAX:
        TEMP_MAX = temp
        return colors[-1]
    elif temp <= TEMP_MIN:
        TEMP_MIN = temp
        return colors[0]

    index = (temp - TEMP_MIN) * (num_colors - 1) // (TEMP_MAX - TEMP_MIN)
    return colors[int(index)]


def temp_to_ctext(temp):
    color = temperature_to_color(temp)
    pad_float = str(f"{temp:.6f}")
    pad_def   = f"{pad_float} " + chr(176) + "C"
    return ctext(color, f"{pad_def:>13}")

def bool_to_ctext(b):
    if b:
        return ctext(40, b)
    else:
        return ctext(226, b)

#
# DRAWING ON TERMINAL
#
term_show_count = 0
g_tc = os.get_terminal_size().columns
g_tl = os.get_terminal_size().lines

def term_show_count_reset():
    global term_show_count
    term_show_count = 0


def term_clear():
    os.system("clear")
    term_show_count_reset()


def term_cursor_reset():
    print("\033[0;0H", end="")
    term_show_count_reset()


def term_cursor_hide():
    print("\033[?25l")


def term_cursor_show():
    print("\033[?25h")


def term_blank():
    term_cursor_hide()
    term_clear()


def term_show_print(printStr, color=""):
    global term_show_count
    tl = os.get_terminal_size().lines
    if term_show_count >= (tl - 1):
        return
    # print(f"{color}{printStr}{Style.RESET_ALL}")
    print(f"{printStr}")
    term_show_count += 1


def term_show(s, color=""):
    global g_tc
    global g_tl
    strings = s.split("\n")
    tc = os.get_terminal_size().columns
    tl = os.get_terminal_size().lines
    if g_tc != tc or g_tl != tl:
        g_tc = tc
        g_tl = tl
        term_clear()
    for i in strings:
        il = len(i)
        if il > tc:
            term_show_print(i[:tc], color)
        else:
            term_show_print(i + str(" " * int(int(tc) - int(il))), color)


#
# OTHER INFO
#
def timestamp():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")


def get_local_ips():
    """Get all IPv4 addresses excluding 127.0.0.1."""
    try:
        result = subprocess.run(
            "ip -o -4 addr show | awk '{print $4}' | cut -d/ -f1 | grep -v '127.0.0.1'",
            shell=True,
            capture_output=True,
            text=True
        )
        return result.stdout.strip().replace("\n", " ") if result.stdout else "No IP found"
    except Exception as e:
        return f"Error: {e}"


# exit handler
@atexit.register
def signal_handler():
    term_cursor_show()

def status():
    # Send GET request
    # act like firefox
    headers = {
        "Accept": "application/json, text/javascript, */*; q=0.01",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "en-US,en;q=0.5",
        "Cache-Control": "no-cache",
        "Connection": "keep-alive",
        "Cookie": "i18next=srb",
        "DNT": "1",
        "Host": "192.168.1.250:9001",
        "Pragma": "no-cache",
        "Referer": "http://192.168.1.250:9001/",
        "Sec-GPC": "1",
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:135.0) Gecko/20100101 Firefox/135.0",
        "X-Requested-With": "XMLHttpRequest",
    }
    response = requests.get(url, headers=headers)
    response.raise_for_status()  # Raise an error for HTTP error codes
    data = response.json()

    # Collect key-value pairs
    dic = {}
    for key, value in data.items():
        if isinstance(value, dict) and "value" in value:
            dic[key] = value["value"]


    StatusPumpe3 = bool_to_ctext(int(dic["StatusPumpe3"]))
    StatusPumpe4 = bool_to_ctext(int(dic["StatusPumpe4"]))
    StatusPumpe5 = bool_to_ctext(int(dic["StatusPumpe5"]))
    StatusPumpe6 = bool_to_ctext(int(dic["StatusPumpe6"]))
    StatusPumpe7 = bool_to_ctext(int(dic["StatusPumpe7"]))
    ModRada      = bool_to_ctext(int(dic["mod_rada"]))
    ModRezim     = bool_to_ctext(int(dic["mod_rezim"]))

    status = []
    status.append(["Circulation Pump", StatusPumpe3])
    status.append(["Gas Pump", StatusPumpe4])
    status.append(["StatusPumpe5", StatusPumpe5])
    status.append(["Heat Pump", StatusPumpe6])
    status.append(["StatusPumpe7", StatusPumpe7])
    status.append(["Mod Rada", ModRada])
    status.append(["Mod Rezim", ModRezim])

    Tspv = temp_to_ctext(dic["Tspv"])
    Tsolar = temp_to_ctext(dic["Tsolar"])
    Taktualno = temp_to_ctext(dic["Taktualno"])
    Tzadata = temp_to_ctext(dic["Tzadata"])
    Tzad_red = temp_to_ctext(dic["Tzad_red"])
    Tzad_komf = temp_to_ctext(dic["Tzad_komf"])
    Tfs = temp_to_ctext(dic["Tfs"])
    Tmax = temp_to_ctext(dic["Tmax"])
    Tmid = temp_to_ctext((dic["Tmax"] + dic["Tmin"]) / 2)
    Tmin = temp_to_ctext(dic["Tmin"])
    Tsobna = temp_to_ctext(dic["Tsobna"])

    temps = []
    temps.append(["Outside", Tspv])
    temps.append(["Solar", Tsolar])
    temps.append(["Active", Taktualno])
    temps.append(["Current", Tzadata])
    temps.append(["Regular", Tzad_red])
    temps.append(["Comfort", Tzad_komf])
    temps.append(["Near Circ. Pump", Tfs])
    temps.append(["Buffer Max", Tmax])
    temps.append(["Buffer Mid", Tmid])
    temps.append(["Buffer Min", Tmin])
    temps.append(["Room", Tsobna])

    term_cursor_reset()
    term_show(f"{timestamp()} / {get_local_ips()}")

    table1_str = tabulate(temps, tablefmt="fancy_outline", colalign=("right",))
    table2_str = tabulate(status, tablefmt="fancy_outline", colalign=("right",))

    table1_lines = table1_str.splitlines()
    table2_lines = table2_str.splitlines()
    max_lines = max(len(table1_lines), len(table2_lines))

    while len(table1_lines) < max_lines:
        table1_lines.append("")

    while len(table2_lines) < max_lines:
        table2_lines.append("")

    for line1, line2 in zip(table1_lines, table2_lines):
        print(f"{line1}{line2}")
        

term_cursor_hide()
term_clear()


running = True

try:
    while running:

        try:
            status()
        except requests.exceptions.Timeout:
            print(f"[{timestamp()}] The request timed out")
        except requests.exceptions.ConnectionError:
            print(f"[{timestamp()}] Failed to establish a connection")
        except requests.exceptions.HTTPError as e:
            print(f"[{timestamp()}] HTTP error occurred: {e}")
        except requests.exceptions.TooManyRedirects:
            print(f"[{timestamp()}] Too many redirects")
        except requests.exceptions.URLRequired:
            print(f"[{timestamp()}] A valid URL is required")
        except requests.exceptions.ChunkedEncodingError:
            print(f"[{timestamp()}] Chunked encoding error")
        except requests.exceptions.RequestException as e:
            print(f"[{timestamp()}] General request exception: {e}")
        except json.JSONDecodeError:
            print(f"[{timestamp()}] Error decoding JSON response")
        except Exception as e:
            print(f"[{timestamp()}] Unexpected error: {e}")

        time.sleep(10)
except KeyboardInterrupt:
    print("Quitting...")
    running = False
